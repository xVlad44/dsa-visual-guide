export const codeExamples = {
  bubble: {
    javascript: [
      'function bubbleSort(arr) {',
      '  for (let i = 0; i < arr.length - 1; i++) {',
      '    for (let j = 0; j < arr.length - i - 1; j++) {',
    '      if (arr[j] > arr[j + 1]) {',
    '        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];',
    '      }',
    '    }',
    '  }',
    '  return arr;',
    '}'
  ],
  python: [
    'def bubble_sort(arr):',
    '  n = len(arr)',
    '  for i in range(n - 1):',
    '    for j in range(n - i - 1):',
    '      if arr[j] > arr[j + 1]:',
    '        arr[j], arr[j + 1] = arr[j + 1], arr[j]',
    '  return arr'
  ],
},
  insertion: {
    javascript: [
      'function insertionSort(arr) {',
      '  for (let i = 1; i < arr.length; i++) {',
      '    let key = arr[i];',
      '    let j = i - 1;',
    '    while (j >= 0 && arr[j] > key) {',
    '      arr[j + 1] = arr[j];',
    '      j--;',
    '    }',
    '    arr[j + 1] = key;',
    '  }',
    '  return arr;',
    '}'
  ],
},
  selection: {
    javascript: [
      'function selectionSort(arr) {',
      '  for (let i = 0; i < arr.length - 1; i++) {',
      '    let minIndex = i;',
      '    for (let j = i + 1; j < arr.length; j++) {',
      '      if (arr[j] < arr[minIndex]) {',
    '        minIndex = j;',
    '      }',
    '    }',
    '    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];',
    '  }',
    '  return arr;',
    '}'
  ],
},
  merge: {
    javascript: [
      'function mergeSort(arr) {',
      '  if (arr.length <= 1) return arr;',
      '  const mid = Math.floor(arr.length / 2);',
      '  const left = mergeSort(arr.slice(0, mid));',
      '  const right = mergeSort(arr.slice(mid));',
    '  return merge(left, right);',
    '}',
    'function merge(left, right) {',
    '  let result = [], i = 0, j = 0;',
    '  while (i < left.length && j < right.length) {',
    '    result.push(left[i] <= right[j] ? left[i++] : right[j++]);',
    '  }',
    '  return result.concat(left.slice(i), right.slice(j));',
    '}'
  ],
},
  quick: {
    javascript: [
      'function quickSort(arr, low = 0, high = arr.length - 1) {',
      '  if (low < high) {',
      '    const pi = partition(arr, low, high);',
      '    quickSort(arr, low, pi - 1);',
    '    quickSort(arr, pi + 1, high);',
    '  }',
    '  return arr;',
    '}',
    'function partition(arr, low, high) {',
    '  const pivot = arr[high];',
    '  let i = low - 1;',
    '  for (let j = low; j < high; j++) {',
    '    if (arr[j] < pivot) {',
    '      i++;',
    '      [arr[i], arr[j]] = [arr[j], arr[i]];',
    '    }',
    '  }',
    '  [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];',
    '  return i + 1;',
    '}'
  ],
},
  heap: {
    javascript: [
      'function heapSort(arr) {',
      '  const n = arr.length;',
      '  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {',
      '    heapify(arr, n, i);',
      '  }',
    '  for (let i = n - 1; i > 0; i--) {',
    '    [arr[0], arr[i]] = [arr[i], arr[0]];',
    '    heapify(arr, i, 0);',
    '  }',
    '  return arr;',
    '}',
    'function heapify(arr, n, i) {',
    '  let largest = i;',
    '  const left = 2 * i + 1;',
    '  const right = 2 * i + 2;',
    '  if (left < n && arr[left] > arr[largest]) largest = left;',
    '  if (right < n && arr[right] > arr[largest]) largest = right;',
    '  if (largest !== i) {',
    '    [arr[i], arr[largest]] = [arr[largest], arr[i]];',
    '    heapify(arr, n, largest);',
    '  }',
    '}'
  ],
},
  radix: {
    javascript: [
      'function countingSort(arr, exp) {',
      '  const n = arr.length;',
      '  const output = new Array(n).fill(0);',
      '  const count = new Array(10).fill(0);',
      '  for (let i = 0; i < n; i++) {',
    '    count[Math.floor(arr[i] / exp) % 10]++;',
    '  }',
    '  for (let i = 1; i < 10; i++) {',
    '    count[i] += count[i - 1];',
    '  }',
    '  for (let i = n - 1; i >= 0; i--) {',
    '    output[count[Math.floor(arr[i] / exp) % 10] - 1] = arr[i];',
    '    count[Math.floor(arr[i] / exp) % 10]--;',
    '  }',
    '  for (let i = 0; i < n; i++) {',
    '    arr[i] = output[i];',
    '  }',
    '}',
    'function radixSort(arr) {',
    '  const max = Math.max(...arr);',
    '  for (let exp = 1; Math.floor(max / exp) > 0; exp *= 10) {',
    '    countingSort(arr, exp);',
    '  }',
    '}'
  ],
},
  bucket: {
    javascript: [
      'function bucketSort(arr) {',
      '  const buckets = Array.from({ length: 10 }, () => []);',
      '  for (let i = 0; i < arr.length; i++) {',
      '    const bucketIndex = Math.floor(arr[i] / 10);',
      '    buckets[bucketIndex].push(arr[i]);',
    '  }',
    '  for (let i = 0; i < buckets.length; i++) {',
    '    buckets[i] = insertionSort(buckets[i]);',
    '  }',
    '  return [].concat(...buckets);',
    '}',
    'function insertionSort(arr) {',
    '  for (let i = 1; i < arr.length; i++) {',
    '    const key = arr[i];',
    '    let j = i - 1;',
    '    while (j >= 0 && arr[j] > key) {',
    '      arr[j + 1] = arr[j];',
    '      j--;',
    '    }',
    '    arr[j + 1] = key;',
    '  }',
    '  return arr;',
    '}'
  ]
}
  
}